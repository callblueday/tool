# 原有设置 {{{1
# Lines configured by zsh-newuser-install
_zdir=${ZDOTDIR:-$HOME}
HISTFILE=${_zdir}/.histfile
HISTSIZE=10000
SAVEHIST=10000
unsetopt beep
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename "$_zdir/.zshrc"

fpath=($_zdir/.zsh/Completion $_zdir/.zsh/functions $fpath)
autoload -Uz compinit
compinit
# End of lines added by compinstall

# 确定环境 {{{1
OS=${$(uname)%_*}
if [[ $OS == "CYGWIN" ]]; then
  OS=Linux
elif [[ $OS == "Darwin" ]]; then
  OS=FreeBSD
fi
unsetopt nomatch
# 选项设置{{{1
# 不需要打 cd，直接进入目录
setopt autocd
# 自动记住已访问目录栈
setopt auto_pushd
setopt pushd_ignore_dups
# rm * 时不要提示
setopt rm_star_silent
# 允许在交互模式中使用注释
setopt interactive_comments
# disown 后自动继续进程
setopt auto_continue
setopt extended_glob
# 单引号中的 '' 表示一个 ' （如同 Vimscript 中者）
setopt rc_quotes
# 补全列表不同列可以使用不同的列宽
setopt listpacked
# 为方便复制，右边的提示符只在最新的提示符上显示
setopt transient_rprompt
# setopt 的输出显示选项的开关状态
setopt ksh_option_print
setopt no_bg_nice
# setopt noflowcontrol 在 tmux 中不起作用
stty -ixon
# 历史记录{{{3
# 不保留重复的历史记录项
setopt hist_ignore_all_dups
# 在命令前添加空格，不将此命令添加到记录文件中
setopt hist_ignore_space
# zsh 4.3.6 doesn't have this option
setopt hist_fcntl_lock 2>/dev/null
setopt hist_reduce_blanks

# zstyle {{{1
# 自动补全 {{{2
# 用本用户的所有进程补全
zstyle ':completion:*:processes' command 'ps -afu$USER|awk ''{sub("[[:space:]]+$", "", $0); t=""; for(i=8;i<=NF;i++)t=t" "$i; p=substr($0, 1, length($0)-length(t)); sub("^ [^[:space:]]*/", " ", t); print p t}'''
zstyle ':completion:*:*:*:*:processes' force-list always
# 进程名补全
zstyle ':completion:*:processes-names' command  'ps c -u ${USER} -o command | uniq'

# 警告显示为红色
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
# 描述显示为淡色
zstyle ':completion:*:descriptions' format $'\e[2m -- %d --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;33m -- %d (errors: %e) --\e[0m'

# cd 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
# 在 .. 后不要回到当前目录
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:man:*' separate-sections true

zstyle ':completion:*' menu select
# 分组显示
zstyle ':completion:*' group-name ''
# 模糊匹配
# 在最后尝试使用文件名
zstyle ':completion:*' completer _complete _match _approximate _ignored _files
# 修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# 使用缓存。某些命令的补全很耗时的（如 aptitude）
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ${_dir}/.zsh/cache
zstyle -e ':completion:*' special-dirs \
  '[[ $PREFIX == (../)#(|.|..) ]] && reply=(..)'

compdef pkill=killall
compdef pgrep=killall
compdef vman=man
compdef proxychains=command
compdef watch=command
compdef rlwrap=command
compdef ptyless=command
compdef grc=command
compdef agg=ag 2>/dev/null
compdef downgrade=pactree 2>/dev/null

# 我的自动补全 {{{2
# 补全 pdf2png
zstyle ':completion:*:*:pdf2png:*' file-patterns \
  '*.pdf:pdf\ files *(-/):directories'
zstyle ':completion:*:*:x:*' file-patterns \
'*.{7z,bz2,gz,rar,tar,tbz,tgz,zip,chm,xz,exe,xpi,apk}:compressed\ files *(-/):directories'
zstyle ':completion:*:*:evince:*' file-patterns \
'*.{pdf,ps,eps,dvi,pdf.gz,ps.gz,dvi.gz}:documents *(-/):directories'
zstyle ':completion:*:*:gbkunzip:*' file-patterns '*.zip'
zstyle ':completion:*:*:luit:*' file-patterns '*(*)'
zstyle ':completion:*:*:flashplayer:*' file-patterns '*.swf'
zstyle ':completion:*:*:hp2ps:*' file-patterns '*.hp'
zstyle ':completion:*:*:feh:*' file-patterns '*.{png,gif,jpg,svg}:images' '*(-/):directories'
zstyle ':completion:*:*:sxiv:*' file-patterns '*.{png,gif,jpg}:images *(-/):directories'
zstyle ':completion:*:*:timidity:*' file-patterns '*.mid'

# 命令行编辑{{{1
bindkey -e

# ^Xe 用$EDITOR编辑命令
autoload -Uz edit-command-line
zle -N edit-command-line
zle -C complete-file menu-expand-or-complete _generic
zstyle ':completion:complete-file:*' completer _files

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

insert-last-word-r () {
  zle insert-last-word -- 1
}
zle -N insert-last-word-r
bindkey "\e_" insert-last-word-r

# Not works with my insert-last-word-r
# autoload -Uz smart-insert-last-word
# zle -N insert-last-word smart-insert-last-word

# autoload -Uz zsh-movement
# zle -N zsh-backward-word zsh-movement
# zle -N zsh-forward-word zsh-movement
# bindkey "\eB" zsh-backward-word
# bindkey "\eF" zsh-forward-word

autoload -Uz prefix-proxy
zle -N prefix-proxy
bindkey "^Xp" prefix-proxy

zmodload zsh/complist
bindkey -M menuselect '^O' accept-and-infer-next-history

bindkey "^X^I" complete-file
bindkey "^U" backward-kill-line
bindkey "^]" vi-find-next-char
bindkey "\e]" vi-find-prev-char
bindkey "\eq" push-line-or-edit
bindkey -s "\e[Z" "^P"
bindkey '^Xa' _expand_alias
bindkey '^X^E' edit-command-line
bindkey '^[/' _history-complete-older
bindkey '\e ' set-mark-command
# 用单引号引起最后一个单词
# FIXME 如何引起光标处的单词？
bindkey -s "^['" "^[] ^f^@^e^[\""
# 打开 zsh 的PDF格式文档
bindkey -s "^X^D" "evince ~/文档/编程/shell/zsh/zsh.pdf &^M"
bindkey -s "^Xc" "tmux attach -d -t 1^M"
# look for a command that started like the one starting on the command line {{{3
# http://www.xsteve.at/prg/zsh/.zshrc
function history-search-end {
  integer ocursor=$CURSOR

  if [[ $LASTWIDGET = history-beginning-search-*-end ]]; then
    # Last widget called set $hbs_pos.
    CURSOR=$hbs_pos
  else
    hbs_pos=$CURSOR
  fi

  if zle .${WIDGET%-end}; then
    # success, go to end of line
    zle .end-of-line
  else
    # failure, restore position
    CURSOR=$ocursor
    return 1
  fi
}
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^[p' history-beginning-search-backward-end
bindkey '^[n' history-beginning-search-forward-end
# 词界像 bash 那样{{{3
# autoload -U select-word-style
# select-word-style bash
# Esc-Esc 在当前/上一条命令前插入 sudo {{{3
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo ${BUFFER% }"
    zle end-of-line #光标移动到行末
}
zle -N sudo-command-line
bindkey "\e\e" sudo-command-line
# 插入当前的所有补全 http://www.zsh.org/mla/users/2000/msg00601.html {{{3
_insert_all_matches () {
    setopt localoptions nullglob rcexpandparam extendedglob noshglob
    unsetopt markdirs globsubst shwordsplit nounset ksharrays
    compstate[insert]=all
    compstate[old_list]=keep
    _complete
}
zle -C insert-all-matches complete-word _insert_all_matches
bindkey '^Xi' insert-all-matches
# 别名 {{{1
# 命令别名 {{{2
alias ll='ls -lh'
alias la='ls -A'
alias rsync="rsync '--exclude=*~' '--exclude=*.swp'"
if [[ $OS == 'Linux' ]]; then
  alias ls='ls --color=auto'
  [[ -n $commands[dircolors] ]] && eval "`dircolors -b`"
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
elif [[ $OS == 'FreeBSD' ]]; then
  alias ls='ls -G'
else
  alias ls='ls -F'
fi
if [[ $OS == 'Linux' || $OS == 'FreeBSD' ]]; then
  alias grep='grep --color=auto'
fi
alias n='nautilus --no-desktop'
alias py='python3'
alias svim="vim -i NONE"
alias rv='EDITOR="vim --servername GVIM --remote-tab-wait"'
alias :q="exit"
alias 7z="7z '-xr!*~' '-xr!*.swp'"
alias mytex=". ~/soft/context/tex/setuptex"
[[ -n $commands[zhcon] ]] && alias zhcon="zhcon --utf8"
[[ -n $commands[luit] ]] && alias gbk="luit -encoding gbk"
[[ -n $commands[hp2ps] ]] && alias hp2ps="hp2ps -c"
[[ -n $commands[html2text] ]] && alias html2text="html2text -nobs -style pretty"
[[ -n $commands[ilua] ]] && alias ilua='rlwrap ilua'
[[ -n $commands[psh] ]] && alias psh='rlwrap psh'
[[ -n $commands[ccal] ]] && alias ccal='ccal -ub'
[[ -n $commands[zbarcam] ]] && alias zbarcam='LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam'
[[ -n $commands[tree] ]] && alias tree='tree -CN'
[[ -n $commands[l] ]] || alias l='locate'
[[ -n $commands[lre] ]] || alias lre='locate -b --regex'
[[ -n $commands[lrew] ]] || alias lrew='locate --regex'

alias winxp="VBoxManage startvm WinXP"
alias winxp2="VBoxManage startvm WinXP_test"
alias dmount="udisks --mount"
alias ren="vim +'Ren'"
# 查看进程数最多的程序
alias topnum="ps -e|sort -k4|awk '{print \$4}'|uniq -c|sort -n|tail"
alias soul="mplayer -really-quiet -nolirc -loop 0 ~/音乐/_纯音乐/忧伤还是快乐.mp3"
alias xcp="rsync -aviHK --delete --exclude='*~' --exclude=__pycache__"
alias pm-suspend=mysuspend
alias pm-hibernate="leave; sleep 1; dbus-send --system --print-reply --dest=org.freedesktop.UPower /org/freedesktop/UPower org.freedesktop.UPower.Hibernate"

# 后缀别名 {{{2
alias -s xsl="vim"
alias -s {html,htm}="firefox"
alias -s {pdf,ps}="evince"
alias -s ttf="gnome-font-viewer"
alias -s {png,jpg,gif}="feh"
alias -s jar="java -jar"
alias -s swf="flashplayer"

# 路径别名 {{{2
hash -d tmp="$HOME/tmpfs"
hash -d txtfiles="/ldata/txtfiles"
hash -d SJ='/media/SJ'
hash -d phone='/media/PHONE CARD'
hash -d gtk="$HOME/scripts/c/gtk"
hash -d py="$HOME/scripts/python"
hash -d ebook="$HOME/temp/ebook"
hash -d ff="$HOME/.mozilla/firefox/profile"
hash -d wuala="$HOME/wuala/WualaDrive/lilydjwg"

# 全局别名 {{{2
# 当前目录下最后修改的文件
# 来自 http://roylez.heroku.com/2010/03/06/zsh-recent-file-alias.html
alias -g NN="*(oc[1])"
alias -g NUL="/dev/null"
alias -g XS='$(xsel)'
alias -g ANYF='**/*[^~](.)'

# 函数 {{{1
autoload zargs
TRAPTERM () { exit }
eval "update () { . $_zdir/.zshrc }"
[[ -n $commands[strace] ]] && strace () { command strace $@ 3>&1 1>&2 2>&3 | vim -R - }
[[ -n $commands[ltrace] ]] && ltrace () { command ltrace $@ 3>&1 1>&2 2>&3 | vim -R - }
vman () { vim +"set ft=man" +"Man $@" }
song () { find ~/音乐 -iname "*$1*" }
mvpc () { mv $1 "`echo $1|ascii2uni -a J`" } # 将以 %HH 表示的文件名改正常
nocolor () { sed -r "s:\x1b\[[0-9;]*[mK]::g" }
sshpubkey () { tee < ~/.ssh/id_rsa.pub >(xsel -i) }
breakln () { #断掉软链接 {{{2
  for f in $@; do
    tgt=$(readlink "$f")
    unlink "$f"
    cp -r "$tgt" "$f"
  done
}
if [[ $TERM == screen* ]]; then # {{{2 设置标题
  # 注：不支持中文
  title () { echo -ne "\ek$*\e\\" }
else
  title () { echo -ne "\e]0;$*\a" }
fi
if [[ $TERM == xterm* ]] || [[ $TERM == *rxvt* ]]; then # {{{2 设置光标颜色
  cursorcolor () { echo -ne "\e]12;$*\007" }
elif [[ $TERM == screen* ]]; then
  if [[ -n "$TMUX" ]]; then
    cursorcolor () { echo -ne "\ePtmux;\e\e]12;$*\007\e\\" }
  else
    cursorcolor () { echo -ne "\eP\e]12;$*\007\e\\" }
  fi
fi
if [[ -d ${VIMTMP:=~/tmpfs} ]]; then # {{{2 gcc & g++
  gcc () { # {{{3
    errfile=$VIMTMP/.error
    command gcc -g -Wall $@ >$errfile 2>&1
    ret=$?
    cat $errfile
    return $ret
  }
  g++ () { # {{{3
    errfile=$VIMTMP/.error
    command g++ -g -Wall $@ >$errfile 2>&1
    ret=$?
    cat $errfile
    return $ret
  }
fi
2mp3 () { # 转换成 mp3 格式 {{{2
  [[ $# -ne 1 ]] && echo "Usage: $0 FILE" && return 1
  mplayer -vo null -vc dummy -af resample=44100 -ao pcm:waveheader "$1" && \
  lame -m s audiodump.wav -o "$1:r.mp3" && rm audiodump.wav || \
  {echo Failed. && return 2}
}
ptyless () { # 使用伪终端代替管道，对 ls 这种“顽固分子”有效 {{{2
  zmodload zsh/zpty
  zpty ptyless ${1+"$@"}
  zpty -r ptyless > /tmp/ptyless.$$
  less -RFX /tmp/ptyless.$$
  rm -f /tmp/ptyless.$$
  zpty -d ptyless
}
sshget () { # 通过 ssh 下载文件（国外）{{{2
  if [[ $# -ne 2 ]]; then
    echo "Usage: $0 URL FILE"
    return 1
  fi
  ssh shell.cjb.net "wget -q -O - $1"|pv > $2
}
sshget2 () { # 通过 ssh 下载文件（国内）{{{2
  if [[ $# -ne 2 ]]; then
    echo "Usage: $0 URL FILE"
    return 1
  fi
  ssh ubuntu.unix-center.net "wget -q -O - '$1'"|pv > $2
}
mvgb () { # 文件名从 GB 转码，带确认{{{2
  for i in $@; do
    new="`echo $i|iconv -f utf8 -t latin1|iconv -f gbk`"
    echo $new
    echo -n 'Sure? '
    read -q ans && mv -i $i $new
    echo
  done
}
iip () { #{{{2
  qip=${1:-cip}
  echo -n "ip> "
  read ip
  while [[ $ip != 'q' ]]; do
    $qip $ip
    echo -n "ip> "
    read ip
  done
  unset ip
}
pid () { #{{{2
  s=0
  for i in $@; do
    echo -n "$i: "
    r=`cat /proc/$i/cmdline|tr '\0' ' ' 2>/dev/null`
    if [[ $? -ne 0 ]]; then
      echo not found
      s=1
    else
      echo $r
    fi
  done
  return $s
}
proxy () { #常用代理一起启动{{{2
  python2 ~/src/goagent/local/proxy.py &
  # (cd ~/src/goagent/local && exec python2 ~/src/goagent/local/proxy.py)&
  # ~/soft/g/APJP/JAVA/APJP.sh&
}
s () { # 快速查找当前目录下的文件 {{{2
  name=$1
  shift
  find . -name "*$name*" $@
}
function en { # 使用 DNS TXT 记录的词典 {{{2
  # https://github.com/chuangbo/jianbing-dictionary-dns
  dig "$*.jianbing.org" +short txt | perl -pe's/\\(\d{1,3})/chr $1/eg; s/(^"|"$)//g'
}
shutdown () { #{{{2
  echo -n 你确定要关机吗？
  read i
  if [[ $i == [Yy] ]]; then
    systemctl poweroff
    # dbus-send --system --print-reply --dest=org.freedesktop.ConsoleKit /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop
  fi
}
killssh () { #{{{2 kill all ssh that using default master socket
  pids=$(netstat -nxlp 2>/dev/null | awk -v HOME=$HOME '{if(index($10, HOME"/.ssh/master-") == 1){print $9}}' | grep -o '^[[:digit:]]\+')
  [[ -n $pids ]] && kill ${=pids}
}
tianqi () { #天气预报 {{{2
  if [[ $# -eq 1 ]]; then
    city=$1
  elif [[ $# -eq 0 ]]; then
    city=南京
  else
    echo "城市？" >&2
    return 1
  fi
  w3m -dump "http://weather1.sina.cn/dpool/weather_new/forecast_new.php?city=$city&vt=4" 2>/dev/null | sed '1,/设为天气首页/d;/查看未来天气详情/,$d;/^\s*$/d;/分享/d;s/\[[^]]\+\]//g;s/^\s*//;'
}
yuntu_url () { #最新卫星云图 {{{2
  curl -s --compressed http://www.weather.com.cn/static/product_video_v1.php\?class\=JC_YT_DL_WXZXCSYT | grep -E 'sevp_nsmc_wxcl_asc_e99_achn_lno_py_(.+)? w' | cut -c62-157
}
yuniodl () { #下载云诺分享文件 {{{2
  token=$1
  [[ -z $token ]] && return 1
  wget -c --header "Referer: http://s.yunio.com/$token" http://s.yunio.com/public/download/token/"$token"
}
# 变量设置 {{{1
[[ -f $_zdir/.zsh/zshrc.local ]] && source $_zdir/.zsh/zshrc.local
# zsh{{{2
# 提示符
# %n --- 用户名
# %~ --- 当前目录
# %h --- 历史记录号
if [[ -n $commands[git] ]]; then
  _current_branch () {
    br=$(git branch --no-color 2>/dev/null)
    if [[ $? -eq 0 ]]; then
      echo -n "$(echo $br|awk '{if($1 == "*"){print "%{[33m%} (" substr($0, 3) ")"}}')"
    fi
  }
  setopt PROMPT_SUBST
  show_current_branch='$(_current_branch)'
fi
[[ -n $ZSH_PS_HOST && $ZSH_PS_HOST != \(*\)\  ]] && ZSH_PS_HOST="($ZSH_PS_HOST) "
PS1="%{[2m%}%h $ZSH_PS_HOST%(?..%{[1;31m%}%?%{[0m%} )%{[32m%}%~$show_current_branch
%(!.%{[0;31m%}###.%{[1;34m%}>>>)%{[0m%} "
# 次提示符：使用暗色
PS2="%{[2m%}%_>%{[0m%} "
# 右边的提示
RPS1="%(1j.%{[1;33m%}%j .)%{[m%}%T"
CORRECT_IGNORE='_*'
READNULLCMD=less

# TeX{{{2
export TEXMFCACHE=$HOME/.cache
export OSFONTDIR=$HOME/.fonts:/usr/share/fonts/TTF

# gstreamer mp3 标签中文设置{{{2
export GST_ID3_TAG_ENCODING=GB18030:UTF-8
export GST_ID3V2_TAG_ENCODING=GB18030:UTF-8

# 图形终端下(包括ssh登录时)的设置{{{2
# 默认浏览器
if [[ -n $DISPLAY && -z $SSH_CONNECTION ]]; then
  export BROWSER=firefox
  export wiki_browser=firefox
fi
if [[ -n $DISPLAY || -n $SSH_CONNECTION ]]; then
  # 让 less 将粗体/下划线等显示为彩色
  export LESS_TERMCAP_mb=$'\x1b[01;31m'
  export LESS_TERMCAP_md=$'\x1b[01;38;5;74m'
  export LESS_TERMCAP_me=$'\x1b[0m'
  export LESS_TERMCAP_se=$'\x1b[0m'
  export LESS_TERMCAP_so=$'\x1b[7m'
  export LESS_TERMCAP_ue=$'\x1b[0m'
  export LESS_TERMCAP_us=$'\x1b[04;38;5;146m'

  if [[ $TERM == linux ]]; then
    ;
  else
    [[ $TERM != *color* ]] && export TERM=${TERM%%[.-]*}-256color
  fi
else
  # tty 下光标显示为块状
  echo -ne "\e[?6c"
  zshexit () {
    [[ $SHLVL -eq 1 ]] && echo -ne "\e[?0c"
  }
fi
if [[ "$OS" = Linux ]]; then
  # under fbterm
  # can't see parent on some restricted systems
  if [[ -d /proc/$PPID ]] && command grep -q '\(^\|/\)fbterm' /proc/$PPID/cmdline; then
    export TERM=fbterm
    export LANG=zh_CN.UTF-8
  fi
fi
# 不同的 OS {{{2
if [[ $OS != *BSD ]]; then
  # FreeBSD 和 OpenBSD 上，MANPATH 会覆盖默认的配置
  [ -d $HOME/.cabal/share/man ] && export MANPATH=:$HOME/.cabal/share/man
elif [[ $OS = FreeBSD ]]; then
  export PAGER=less
fi

# 其它程序 {{{3
AUTOJUMP_KEEP_SYMLINKS=1
export LESS="-FRX"

# other exports {{{2
export -TU PYTHONPATH pythonpath
export -U PATH

# 其它 {{{1

# Google doesn't know zsh very well :-(
[[ -f /usr/share/zsh/site-functions/_go ]] && source /usr/share/zsh/site-functions/_go
# When starting as a non-login shell
[[ -z $functions[j] && -f /etc/profile.d/autojump.zsh ]] && source /etc/profile.d/autojump.zsh

unset OS
unset _zdir
setopt nomatch

# some more git aliases
alias g='git'
alias gst='git status'
alias ga='git add'
alias ga.='git add .'
alias gcv='git commit -v'
alias gpho='git push origin'
alias gplo='git pull origin'
alias gphom='git push origin master'
alias gplom='git pull origin master'
alias gphod='git push origin develop'
alias gplod='git pull origin develop'
